https://leetcode.com/problems/max-consecutive-ones-ii/description/

Given a binary array nums, return the maximum number of consecutive 1's in the array if you can flip at most one 0.

Example 1:
Input: nums = [1,0,1,1,0]
Output: 4
Explanation: 
- If we flip the first zero, nums becomes [1,1,1,1,0] and we have 4 consecutive ones.
- If we flip the second zero, nums becomes [1,0,1,1,1] and we have 3 consecutive ones.
The max number of consecutive ones is 4.

Example 2:
Input: nums = [1,0,1,1,0,1]
Output: 4
Explanation: 
- If we flip the first zero, nums becomes [1,1,1,1,0,1] and we have 4 consecutive ones.
- If we flip the second zero, nums becomes [1,0,1,1,1,1] and we have 4 consecutive ones.
The max number of consecutive ones is 4.

Constraints:
1 <= nums.length <= 105
nums[i] is either 0 or 1.

Follow up: What if the input numbers come in one by one as an infinite stream? In other words, 
you can't store all numbers coming from the stream as it's too large to hold in memory. Could you solve it efficiently?
---------------------------------------------------------------------------------------------------------------------------
use sliding window technique to keep track of the max length, increment right pointer, 
keep count of zeros if more than 1 then shift the left pointer

class Solution:
    def findMaxConsecutiveOnes(self, nums: List[int]) -> int:
        left, right = 0, 0
        zeros_count = 0
        max_len = 0
        
        while right < len(nums):
            if nums[right] == 0:
                zeros_count += 1
            
            while zeros_count > 1:
                if nums[left] == 0:
                    zeros_count -= 1
                left += 1
            max_len = max(max_len, right - left + 1)
            right += 1
        return max_len
        
Complexity: O(N)
