There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.
For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.
Return the ordering of courses you should take to finish all courses. If there are many valid answers, return any of them. If it is impossible to finish all courses, return an empty array.

Example 1:
Input: numCourses = 2, prerequisites = [[1,0]]
Output: [0,1]
Explanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1].

Example 2:
Input: numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]
Output: [0,2,1,3]
Explanation: There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0.
So one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3].

Example 3:
Input: numCourses = 1, prerequisites = []
Output: [0]

Constraints:
1 <= numCourses <= 2000
0 <= prerequisites.length <= numCourses * (numCourses - 1)
prerequisites[i].length == 2
0 <= ai, bi < numCourses
ai != bi
All the pairs [ai, bi] are distinct.
----------------------------------------------------------------------------------------------------------------------------
My Approach and Solution:

class Solution:
    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:
        # Lets initialize the empty preMap list which is list of prereq for each course
        preMap = {i : [] for i in range(numCourses)}

        # Fill the list with prereq for each course
        for crs, pre in prerequisites:
            preMap[crs].append(pre)
        
        # Lets declare the output empty list, visitSet and cycle
        # Where visitSet is set where we will know if the node is visited, we can add in o/p
        # cycle -> we are along the path and not to be added in output
        output = []
        visitSet, cycle = set(), set()

        # Define recurrsive dfs on each course
        def dfs(crs):
            # Base cases: if any course if in cycle menas we are visiting it again, we will return false
            if crs in cycle:
                return False
            # 2nd: if our course is in visited, means true and we will add in output
            if crs in visitSet:
                return True
            # above conditions fails, add the visiting crs in cycle
            cycle.add(crs)

            # lets loop through the prereq of each crs
            for pre in preMap[crs]:
                # if the dfs for pre is false we will return false
                if dfs(pre) == False:
                    return False
            
            # we need to remove the crs from cycle, add it to visited and output, and return true
            cycle.remove(crs)
            visitSet.add(crs)
            output.append(crs)
            return True
        # follow same process for each crs, if the dfs has false value return [] else output
        for crs in range(numCourses):
            if dfs(crs) == False:
                return []
        return output
        
Complexity : O(E+V) -> no. of edges + no. of vertices (nodes)
---------------------------------------------------------------------------------------------------------------------------
