Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.
An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.
Example 1:
Input: grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
Output: 1

Example 2:
Input: grid = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]
Output: 3
 
Constraints:
m == grid.length
n == grid[i].length
1 <= m, n <= 300
grid[i][j] is '0' or '1'.
-----------------------------------------------------------------------------------------------------------------------------
My Approach and Solution:

class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        # 1. check if grid is empty
        if not grid:
            return 0

        # 2. get the rows and cols, declare visit set and island count
        rows, cols = len(grid), len(grid[0])
        visitSet = set()
        islands = 0

        # 4. lets write our bfs function: remember its iterative and we need to use queue
        def bfs(r, c):
            q = collections.deque()
            # we need to mark the cell as visited and add it in our queue
            visitSet.add((r, c))
            q.append((r, c))

            # now check the adjacent cells in all four direction of the queue cell
            while q:
                # 1st we need to pop from the queue one cell 
                # (popleft() pops 1st element we added for bfs 
                # (pop() i.e. popright pops most recent element for dfs)
                row, col = q.popleft()
                directions = [[1, 0], [-1, 0], [0, 1], [0, -1]]
                for dr, dc in directions:
                    r, c = row + dr, col + dc
                    if (r in range(rows) and c in range(cols) 
                    and grid[r][c] == "1" and (r, c) not in visitSet):
                        visitSet.add((r, c))
                        q.append((r, c))

        # 3. Lets iterate through every single r and c and check if its 1 and already visited
        # check bfs for adjacent lands and increment island counter
        for r in range(rows):
            for c in range(cols):
                if grid[r][c] == "1" and (r, c) not in visitSet:
                    bfs(r, c)
                    islands += 1 
        return islands

Complexity: O(rows * cols) 
-----------------------------------------------------------------------------------------------------------------------------
