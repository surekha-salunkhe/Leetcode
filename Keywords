1. ANAGRAM
An anagram is a string that contains the exact same characters as another string, but the order of the characters can be different.

2. No-Zero integer
No-Zero integer is a positive integer that does not contain any 0 in its decimal representation.

3. Binary (0,1)
|-----------------------------------------|
| Addition    Subtraction  Multiplication |
| 0 + 0 = 0    0 - 0 = 0    0 * 0 = 0     |
| 0 + 1 = 1    0 - 1 = 1**  0 * 1 = 0     |
| 1 + 0 = 1    1 - 0 = 1    1 * 0 = 0     |
| 1 + 1 = 1*   1 - 1 = 0    1 * 1 = 1     |
|-----------------------------------------|
1* - sum = 1, carry = 1 ans is 11
1** - diff = 1, borrow from left value

4. Palindrome
A palindrome is a string that reads the same forward and backward, ignoring spaces, punctuation, and capitalization.

5. Fibonacci F(n) = F(n-1) + F(n-2)

6. Tribonacci F(n) = F(n-1) + F(n-2) + F(n-3)

7. Bitwise OR (|) 0 + 0 = 0, xor (^) 0 ^ 0 and 1 ^ 1 = 0, 1<<(n-1) == 1*(2^(n-1)) 
XOR Operation:
XOR (exclusive OR) is a bitwise operation that has a few interesting properties:
a ^ a = 0 (XOR of any number with itself is 0)
a ^ 0 = a (XOR of any number with 0 is the number itself)
XOR is commutative and associative, meaning the order in which you XOR numbers doesn't matter.

8. good pairs A pair (i, j) is called good if nums[i] == nums[j] and i < j.

9. append(whole array) and extend(individual elements)
lst = [1, 2, 3]
lst.append([4, 5])
print(lst)  # Output: [1, 2, 3, [4, 5]]

lst = [1, 2, 3]
lst.extend([4, 5])
print(lst)  # Output: [1, 2, 3, 4, 5]
Note: we cannot extend a single number to array lst.extend(4) will give an typeerror

10. a = list(zip(*matrix), transpose_mat = [list(row) for row in a]  -> will transpose the matrix

11. word.ljust(max_length, ' ') - will fill missing space with character if length is not match
