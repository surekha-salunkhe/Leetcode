Suppose we need to sort the array : arr = [1, 2, 4, 5, 2, 3]
There are several ways to solve this problem, we will solve these in highest to lowest time complexity scenarios

1. Bubble sort O(n^2)
Bubble Sort repeatedly steps through the list, compares adjacent elements, and swaps them if they are in the wrong order. The process is repeated until the list is sorted.

  Initial: [1, 2, 4, 5, 2, 3]
  1st pass:                                       2nd pass:                                       3rd pass:
  Compare 1 and 2: [1, 2, 4, 5, 2, 3]             Compare 1 and 2: [1, 2, 4, 2, 3, 5]             Compare 1 and 2: [1, 2, 2, 3, 4, 5]
  Compare 2 and 4: [1, 2, 4, 5, 2, 3]             Compare 2 and 4: [1, 2, 4, 2, 3, 5]             Compare 2 and 2: [1, 2, 2, 3, 4, 5]
  Compare 4 and 5: [1, 2, 4, 5, 2, 3]             Compare 4 and 2: [1, 2, 2, 4, 3, 5] (swap made) Compare 2 and 3: [1, 2, 2, 3, 4, 5]
  Compare 5 and 2: [1, 2, 4, 2, 5, 3] (swap made) Compare 4 and 3: [1, 2, 2, 3, 4, 5] (swap made)
  Compare 5 and 3: [1, 2, 4, 2, 3, 5] (swap made)
  
  Final sorted array: [1, 2, 2, 3, 4, 5]
  We can also use a boolean variable to optimize the process by terminating the outer loop early.

Code:
  def bubble_sort(arr):
    n = len(arr)
    for i in range(n):
        swapped = False
        for j in range(0, n-i-1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
                swapped = True
        # If no swaps were made, the array is already sorted
        if not swapped:
            break

  # Example usage:
  nums = [1, 2, 4, 5, 2, 3]
  bubble_sort(nums)
  print("Bubble Sort:", nums)  # Output: [1, 2, 2, 3, 4, 5]
---------------------------------------------------------------------------------------------------------------------------------------
2. Insertion sort O(n^2)
  a) Start with the first element:
      The first element is considered already sorted. You start sorting from the second element (index 1).
  b) Pick the next element (key):
      Let's call this element the "key". Begin with the element at index 1.
  c) Compare the key with previous elements:
      Compare the key with the element before it (index 0).
      If the key is smaller than this element, shift the element to the right.
  d) Shift elements to make room:
      Continue comparing the key with the elements before it and shifting elements to the right until you find the correct position          for the key.
  e) Insert the key:
      Place the key in its correct position once you find where it should go.
  f) Repeat for all elements:
      Move to the next element (the new key) and repeat the process until the entire array is sorted.

  Initial: [1, 2, 4, 5, 2, 3]
  1st pass:                                       2nd pass:                                       3rd pass:
  Compare 1 and 2: [1, 2, 4, 5, 2, 3]             Compare 1 and 2: [1, 2, 4, 2, 3, 5]             Compare 1 and 2: [1, 2, 2, 3, 4, 5]
  Compare 2 and 4: [1, 2, 4, 5, 2, 3]             Compare 2 and 4: [1, 2, 4, 2, 3, 5]             Compare 2 and 2: [1, 2, 2, 3, 4, 5]
  Compare 4 and 5: [1, 2, 4, 5, 2, 3]             Compare 4 and 2: [1, 2, 2, 4, 3, 5] (swap made) Compare 2 and 3: [1, 2, 2, 3, 4, 5]
  Compare 5 and 2: [1, 2, 4, 2, 5, 3] (swap made) Compare 4 and 3: [1, 2, 2, 3, 4, 5] (swap made)
  Compare 5 and 3: [1, 2, 4, 2, 3, 5] (swap made)
  
  Final sorted array: [1, 2, 2, 3, 4, 5]
  We can also use a boolean variable to optimize the process by terminating the outer loop early.
Code:
  def insertion_sort(arr):
      for i in range(1, len(arr)):
          key = arr[i]
          j = i - 1
          while j >= 0 and key < arr[j]:
              arr[j + 1] = arr[j]
              j -= 1
          arr[j + 1] = key
  
  # Example usage:
  nums_insertion = [1, 2, 4, 5, 2, 3]
  insertion_sort(nums_insertion)
  print("Insertion Sort:", nums_insertion)  # Output: [1, 2, 2, 3, 4, 5]
