Given a string s, return true if the s can be palindrome after deleting at most one character from it.
Example 1:
Input: s = "aba"
Output: true

Example 2:
Input: s = "abca"
Output: true
Explanation: You could delete the character 'c'.

Example 3:
Input: s = "abc"
Output: false

Constraints:
1 <= s.length <= 105
s consists of lowercase English letters.
--------------------------------------------------------------------------------------------------------------------------
Approach:
1. Check if the palindrome if valid by two pointer method
2. If two characters are different then check if one is removed either from start pointer or end pointer will make it a palindrome

----------------------------------------------------------------------------------------------------------------------------
My solution:

class Solution:
    def validPalindrome(self, s: str) -> bool:
        if s == s[::-1]:
            return True
        start = 0
        end = len(s) - 1
        while start < end:
            if s[start] == s[end]:
                start += 1
                end -= 1
            else:
                return s[start:end] == s[start:end][::-1] or s[start + 1:end + 1] == s[start + 1:end + 1][::-1]

        return True

Time Complexity: O(N)
