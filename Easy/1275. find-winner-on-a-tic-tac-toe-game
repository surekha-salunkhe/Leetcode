https://leetcode.com/problems/find-winner-on-a-tic-tac-toe-game/description/
Topics: Array, Hashtable, matrix, simulation

Tic-tac-toe is played by two players A and B on a 3 x 3 grid. The rules of Tic-Tac-Toe are:
Players take turns placing characters into empty squares ' '.
The first player A always places 'X' characters, while the second player B always places 'O' characters.
'X' and 'O' characters are always placed into empty squares, never on filled ones.
The game ends when there are three of the same (non-empty) character filling any row, column, or diagonal.
The game also ends if all squares are non-empty.
No more moves can be played if the game is over.
Given a 2D integer array moves where moves[i] = [rowi, coli] indicates that the ith move will be played on grid[rowi][coli]. return the winner of the game if it exists (A or B). In case the game ends in a draw return "Draw". If there are still movements to play return "Pending".

You can assume that moves is valid (i.e., it follows the rules of Tic-Tac-Toe), the grid is initially empty, and A will play first.
Example 1:
X _ _
_ X _
0 0 X
Input: moves = [[0,0],[2,0],[1,1],[2,1],[2,2]]
Output: "A"
Explanation: A wins, they always play first.

Example 2:
X X 0
X 0 _
0 _ _
Input: moves = [[0,0],[1,1],[0,1],[0,2],[1,0],[2,0]]
Output: "B"
Explanation: B wins.

Example 3:
X X 0
0 0 X
X 0 X
Input: moves = [[0,0],[1,1],[2,0],[1,0],[1,2],[2,1],[0,1],[0,2],[2,2]]
Output: "Draw"
Explanation: The game ends in a draw since there are no moves to make.

Constraints:
1 <= moves.length <= 9
moves[i].length == 2
0 <= rowi, coli <= 2
There are no repeated elements on moves.
moves follow the rules of tic tac toe.
---------------------------------------------------------------------------------------------------------------------------
My Solution:
class Solution:
    def tictactoe(self, moves: List[List[int]]) -> str:
        board = [[0 for _ in range(3)] for _ in range(3)]
        # Fill the board with moves
        for i, (row, col) in enumerate(moves):
            print(i, (row, col))
            board[row][col] = 'A' if i % 2 == 0 else 'B'
        # Lets check for winner

        def check_winner(player):
            for row in board:
                if all(cell == player for cell in row):
                    return True
            for col in range(3):
                if all(board[row][col] == player for row in range(3)):
                    return True
            if all(board[i][i] == player for i in range(3)) or all(board[i][2-i] == player for i in range(3)):
                return True
            return False
        if check_winner('A'):
            return "A"
        if check_winner('B'):
            return "B"
        if len(moves) == 9:
            return "Draw"
        return "Pending"
  --------------------------------------------------------------------------------------------------------------------------
  Complexity: O(1)
