https://leetcode.com/problems/squares-of-a-sorted-array/description/

Given an integer array nums sorted in non-decreasing order, 
return an array of the squares of each number sorted in non-decreasing order.

Example 1:
Input: nums = [-4,-1,0,3,10]
Output: [0,1,9,16,100]
Explanation: After squaring, the array becomes [16,1,0,9,100].
After sorting, it becomes [0,1,9,16,100].

Example 2:
Input: nums = [-7,-3,2,3,11]
Output: [4,9,9,49,121]
 
Constraints:
1 <= nums.length <= 104
-104 <= nums[i] <= 104
nums is sorted in non-decreasing order.
-------------------------------------------------------------------------------------------------------------------
class Solution:
    def sortedSquares(self, nums: List[int]) -> List[int]:
        # b = []
        # for i in nums:
        #     b.append(i * i)
        # b.sort()
        # return b
        # complexity = O(NLog(N)) since sort function

        # Instead use two pointers
        # create a dummy result array same as input
        # left at start and right at end, compare  squares of both, replace the current pos (n-1) with higher square value
        # increment thr left and right position which is higher and decrement the result position to insert value

        n = len(nums)
        result = [0] * n
        left = 0
        right = n - 1
        pos = n - 1

        while left <= right:
            left_square = nums[left] * nums[left]
            right_square = nums[right] * nums[right]

            if left_square > right_square:
                result[pos] = left_square
                left += 1
            else:
                result[pos] = right_square
                right -= 1
            pos -= 1
        return result

Complexity: O(N)
