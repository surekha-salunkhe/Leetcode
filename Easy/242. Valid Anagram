Given two strings s and t, return true if t is an anagram of s, and false otherwise.
An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

( An anagram is a string that contains the exact same characters as another string, but the order of the characters can be different.)

Example 1:
Input: s = "anagram", t = "nagaram"
Output: true

Example 2:
Input: s = "rat", t = "car"
Output: false

Constraints:
1 <= s.length, t.length <= 5 * 104
s and t consist of lowercase English letters.

Follow up: What if the inputs contain Unicode characters? How would you adapt your solution to such a case?

My Approach: 1st base case would be if the len of both strings doesnt match means they are not an anagram, 
2nd point: we can count each letters occurences in the strings to find if the count matches then its an anagram

Solution:
class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        # if len(s) != len(t):
        #     return False
        # for i in s:
        #     if s.count(i) != t.count(i):
        #         return False
        # return True

        # The above solution has time complexity of O(n^2)
        # as count method has O(n) and its called twice

        if len(s) != len(t):
            return False

        countS, countT = {}, {}

        for i in range(len(s)):
            countS[s[i]] = 1 + countS.get(s[i], 0)
            countT[t[i]] = 1 + countT.get(t[i], 0)
        # print(countS, countT)
        # {'r': 1, 'a': 1, 't': 1} {'c': 1, 'a': 1, 'r': 1}
        for c in countS:
            if countS[c] != countT.get(c, 0):
                return False
        return True

Time complexity: O(n)
