https://leetcode.com/problems/linked-list-cycle/description
Topic: Hashtable, LinkedList, Two pointers

Given head, the head of a linked list, determine if the linked list has a cycle in it.
There is a cycle in a linked list if there is some node in the list that can be reached again by 
continuously following the next pointer. Internally, pos is used to denote the index of the node 
that tail's next pointer is connected to. Note that pos is not passed as a parameter.

Return true if there is a cycle in the linked list. Otherwise, return false.

Example 1:
Input: head = [3,2,0,-4], pos = 1
Output: true
Explanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).

Example 2:
Input: head = [1,2], pos = 0
Output: true
Explanation: There is a cycle in the linked list, where the tail connects to the 0th node.

Example 3:
Input: head = [1], pos = -1
Output: false
Explanation: There is no cycle in the linked list.

Constraints:
The number of the nodes in the list is in the range [0, 104].
-105 <= Node.val <= 105
pos is -1 or a valid index in the linked-list.
 
Follow up: Can you solve it using O(1) (i.e. constant) memory?
--------------------------------------------------------------------------------------------------------------------------
Solution:
Floyd’s Tortoise and Hare algorithm (also known as the two-pointer technique). 
This algorithm requires only two pointers (head and fast), so the space complexity is O(1).

Floyd’s Tortoise and Hare algorithm is a classic cycle detection algorithm used for detecting cycles in a sequence, 
such as in a linked list. It operates with two pointers, often referred to as the "Tortoise" (slow pointer) and 
the "Hare" (fast pointer), which traverse the linked list at different speeds. 
The algorithm helps determine whether a cycle exists in the linked list in O(n) time and O(1) space.

Tortoise moves 1 step and Hare moves 2 step, if they meet then its a cycle

Here: head is the tortoise and fast is the hare

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def hasCycle(self, head: Optional[ListNode]) -> bool:
        if not head or not head.next:
            return False
        fast = head
        while fast and fast.next:
            head = head.next 
            fast = fast.next.next
            if head is fast:
                return True
        return False

Complexity: O(N), space O(1)
