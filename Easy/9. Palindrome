9. Palindrome
(Topics: Math)

Given an integer x, return true if x is a palindrome, and false otherwise.

Example 1:
Input: x = 121
Output: true
Explanation: 121 reads as 121 from left to right and from right to left.

Example 2:
Input: x = -121
Output: false
Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.

Example 3:
Input: x = 10
Output: false
Explanation: Reads 01 from right to left. Therefore it is not a palindrome.

Constraints:
-231 <= x <= 231 - 1

Follow up: Could you solve it without converting the integer to a string?
-------------------------------------------------------------------------------------------------------------------------

My Approach and Solution: (with follow up question)

class Solution:
    def isPalindrome(self, x: int) -> bool:
        if str(x) == str(x)[::-1]:
            return True
        return False

    # # Follow up : Could you solve it without converting the integer to a string?
    # # Base case: a -ve no. and no. end with 0 (except 0) are not isPalindrome
    #     if x < 0 or (x % 10 == 0 and x != 0):
    #         return False
    
    # # lets check if the reversed_half  = x (for even) and reversed_half // 10 = x ( for odd)
    #     reversed_half = 0
    #     while x > reversed_half:
    #         reversed_half = reversed_half * 10 + x % 10
    #         x //= 10

    #     return x == reversed_half or x == reversed_half // 10

Complexity: O(log(n)) , since storing and reversing the int requires O(n), but input n can be proportional to log(n)
------------------------------------------------------------------------------------------------------------------------
