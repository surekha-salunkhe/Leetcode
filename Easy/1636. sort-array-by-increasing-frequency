https://leetcode.com/problems/sort-array-by-increasing-frequency/description/
Topics: Array, Hashtable, sorting

Given an array of integers nums, sort the array in increasing order based on the frequency of the values. 
If multiple values have the same frequency, sort them in decreasing order.
Return the sorted array.

Example 1:
Input: nums = [1,1,2,2,2,3]
Output: [3,1,1,2,2,2]
Explanation: '3' has a frequency of 1, '1' has a frequency of 2, and '2' has a frequency of 3.

Example 2:
Input: nums = [2,3,1,3,2]
Output: [1,3,3,2,2]
Explanation: '2' and '3' both have a frequency of 2, so they are sorted in decreasing order.

Example 3:
Input: nums = [-1,1,-6,4,5,-6,1,4,1]
Output: [5,-1,4,4,-6,-6,1,1,1]

Constraints
1 <= nums.length <= 100
-100 <= nums[i] <= 100
--------------------------------------------------------------------------------------------------------------------------
My Solution:

class Solution:
    def frequencySort(self, nums: List[int]) -> List[int]:
        # freq_map = {}
        # for num in nums:
        #     if num in freq_map:
        #         freq_map[num] += 1
        #     else:
        #         freq_map[num] = 1

        # freq = Counter(nums)
        # nums.sort(key=lambda x: (freq[x], -x))
        # return nums

        # O(Nlog(N))
        # or
        # Use below method of Bucket sort only if the when the range of values is not 
        # significantly larger than the number of elements(N) in the array,here n.length is 100 and range is -100 to 100(201)
        # Step 1: Count frequencies using Counter
        freq = Counter(nums)
        
        # Step 2: Create 201 buckets (for values -100 to 100)
        buckets = [[] for _ in range(201)]
        
        # Step 3: Fill buckets with numbers, based on their frequency
        for num in freq:
            index = num + 100  # Normalize -100 to 100 range to 0 to 200
            buckets[index].extend([num] * freq[num])
        
        # Step 4: Concatenate buckets into a result list
        result = []
        for bucket in sorted(buckets, key=lambda x: (len(x), -x[0]) if x else (float('inf'), 0)):
            result.extend(bucket)
        
        return result

        # O(N)
