Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.

Note that you must do this in-place without making a copy of the array.
Example 1:
Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]

Example 2:
Input: nums = [0]
Output: [0]
 
Constraints:
1 <= nums.length <= 104
-231 <= nums[i] <= 231 - 1

Follow up: Could you minimize the total number of operations done?
----------------------------------------------------------------------------
Use two pointer solution
[0,    1,  0 , 3, 12]  check if right is not zero then swap both and increment left
left right
[1,  0,    0,  3, 12] if right is zero skip to next 
    left right
[1,  0,  0,   3, 12] repeat 1st step
    left    right
[1,  3,   0,   0, 12] 
        left right
[1,  3,   0,   0,   12] 
              left right
[1,  3,   12,   0,  0] 

My solution:
-------------------------------------------------------------------------
class Solution:
    def moveZeroes(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        left = 0
        for right in range(len(nums)):
            if nums[right] != 0:
                nums[left], nums[right] = nums[right], nums[left]
                left += 1

Time Complexity: O(N)
