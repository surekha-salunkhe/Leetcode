https://leetcode.com/problems/lucky-numbers-in-a-matrix/description/
Topics: Array, Matrix

Given an m x n matrix of distinct numbers, return all lucky numbers in the matrix in any order.
A lucky number is an element of the matrix such that it is the minimum element in its row and maximum in its column.

Example 1:
Input: matrix = [[3,7,8],[9,11,13],[15,16,17]]
Output: [15]
Explanation: 15 is the only lucky number since it is the minimum in its row and the maximum in its column.

Example 2:
Input: matrix = [[1,10,4,2],[9,3,8,7],[15,16,17,12]]
Output: [12]
Explanation: 12 is the only lucky number since it is the minimum in its row and the maximum in its column.

Example 3:
Input: matrix = [[7,8],[1,2]]
Output: [7]
Explanation: 7 is the only lucky number since it is the minimum in its row and the maximum in its column.

Constraints:
m == mat.length
n == mat[i].length
1 <= n, m <= 50
1 <= matrix[i][j] <= 105.
All elements in the matrix are distinct.
--------------------------------------------------------------------------------------------------------------------------
My Solution:

class Solution:
    def luckyNumbers(self, matrix: List[List[int]]) -> List[int]:
        # a = []
        # column = []
        # for i in range(0, len(matrix)):
        #     a.append(min(matrix[i]))
        # for j in range(0, len(matrix[0])):
        #     column.append([row[j] for row in matrix])
        # for j in range(0, len(column)):
        #     b = max(column[j])
        #     if b in a:
        #         return [b]
        # return []

        row_min = [(min(row), row.index(min(row))) for row in matrix]

        col_max = [max(col) for col in zip(*matrix)]
        for value, index in row_min:
            if value == col_max[index]:
                return [value]

        # Both solutions are O(N*M) complexity, second one is more efficient as
        # reduces redundant operations and processes the matrix in fewer steps
