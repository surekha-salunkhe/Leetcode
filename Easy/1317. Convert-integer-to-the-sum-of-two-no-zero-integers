Given Problem:
No-Zero integer is a positive integer that does not contain any 0 in its decimal representation.
Given an integer n, return a list of two integers [a, b] where:
a and b are No-Zero integers.
a + b = n
The test cases are generated so that there is at least one valid solution. If there are many valid solutions, you can return any of them.

Example 1:
Input: n = 2
Output: [1,1]
Explanation: Let a = 1 and b = 1.
Both a and b are no-zero integers, and a + b = 2 = n.

Example 2:
Input: n = 11
Output: [2,9]
Explanation: Let a = 2 and b = 9.
Both a and b are no-zero integers, and a + b = 9 = n.
Note that there are other valid answers as [8, 3] that can be accepted.
 
Constraints:
2 <= n <= 104
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

My Approach: 
1. for ex: no. is 5 , the answer would be [1 2 3 4 5] -> [1,4] or [2,3] we need to return any possible outcome
2. The integers in the result should not have 0 in it , we need to put a condition check for this

Solution:

class Solution:
  def getNoZeroIntegers(self, n: int) -> List[int]:
    for a in range(1, n):
      b = n - a
      if "0" not in str(a) and "0" not in str(b):
        return [a, b]
input = 5
output = [1, 4]

Complexity:
for loop run from 1 to n - 1          -> O(n)
str conversion                        -> O(log(n))
------------------------------------------------
Overall: O(n) * O(log(n))             -> O(nlog(n))
